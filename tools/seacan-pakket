#!/usr/bin/env perl

# This script needs to be fatpacked when done.
# In order to do this, please use the pre-commit hook
# available in the tools/git-hooks directory, as such:
# ( cd .git/hooks && ln -s ../../tools/git-hooks/pre-commit )

# keep this v5.16 to support centos 7
use v5.16;
use strict;
use warnings;
use diagnostics;

use App::Seacan;
use English '-no_match_vars';
use Getopt::Long qw(:config no_ignore_case);
use IPC::Open3 qw(open3);
use Path::Tiny qw(path tempdir);

use constant {
    'DEFAULT_PERL_VERSION' => '5.38.0',
};

my $app_dir = path('.');
Getopt::Long::GetOptions(
    'perl=s'    => \(my $perl_version = DEFAULT_PERL_VERSION()),
    'app-dir=s' => \$app_dir,
    'files=s@'  => \my @additional_files,
    'help'      => \my $help,
);

$help and _print_help();

-d $app_dir or _print_help('--app-dir must point to a directory');

my $top_src_dir  = tempdir('CLEANUP' => 1);
my $top_dest_dir = tempdir('CLEANUP' => 1);
my $source_dir   = $top_src_dir->child('pakket');
my $dest_dir     = $top_dest_dir->child('pakket');

$dest_dir->mkpath();
$source_dir->mkpath();

my @directories = qw(bin lib share);
foreach my $dir (@directories) {
    path($dir)->visit(
        sub {
            my $next = shift;

            $next->is_file
                or return;

            my $next_dir  = $next->parent;
            my $next_path = $source_dir->child($next_dir);
            $next_path->mkpath();

            say "Copy $next -> $next_path";
            $next->copy($next_path);
        },
        {'recurse' => 1},
    );
}

# cpanfile must be there so "cpanm" would work on the app
foreach my $node (@additional_files, 'cpanfile') {
    my $file = path($node);
    say "Copy $file -> $source_dir";
    $file->copy($source_dir->child($file));
}

my $seacan = App::Seacan->new(
    'config' => {
        'seacan' => {
            'app_name' => 'pakket',
            'output'   => $dest_dir,
            'app'      => $source_dir,
        },

        'perl' => {
            'version'         => $perl_version,
            'installed_as'    => 'seacan',
            'notest'          => 1,
            'noman'           => 1,
            'relocatable_INC' => 1,
            'parallel'        => _detect_cores(),
        },
    },
);

$seacan->run;
say 'Seacan is finished';

say 'Packing...';
my @cmd = (
    'tar', '--create', '--gzip', '--exclude-vcs', "--directory=$top_dest_dir",
    '--file=' . path('pakket.tar.gz')->absolute, '.',
);
say join (' ', @cmd);
system (@cmd) == 0
    or die 'Unable to run command';

sub _print_help {
    my $error   = shift;
    my $min_ver = DEFAULT_PERL_VERSION();

    $error and say "[ERROR] $error\n";

    say << "_END_HELP";
$PROGRAM_NAME [--perl PERL_VER] --app-dir DIR

Options:

--perl        Perl version (default: $min_ver)
--app-dir     Application directory (default: .)
--files       Additional files for inclusion
              (Specify multiple times for each file)
_END_HELP

    exit 2;
}

sub _detect_cores {
    my $cores = 1;
    if ($OSNAME =~ /linux/xms) {
        local $SIG{'CHLD'} = 'IGNORE';
        my ($writer, $reader, $err);
        open3($writer, $reader, $err, 'nproc');
        chomp ($cores = <$reader>);
    }

    return $cores;
}
