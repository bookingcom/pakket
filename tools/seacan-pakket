#!/usr/bin/env perl

# XXX
# This script needs to be fatpacked when done.
# In order to do this, please use the pre-commit hook
# available in the tools/git-hooks directory, as such:
# ( cd .git/hooks && ln -s ../../tools/git-hooks/pre-commit )
# XXX

use strict;
use warnings;
use constant {
    'DEFAULT_PERL_VERSION' => '5.22.2',
};

use English    '-no_match_vars';
use Path::Tiny qw<path tempdir>;
use Getopt::Long qw<:config no_ignore_case>;
use App::Seacan;
use IPC::Open3 qw<open3>;

sub print_help {
    my $error   = shift;
    my $min_ver = DEFAULT_PERL_VERSION();

    $error and print "[ERROR] $error\n\n";

    print << "_END_HELP";
$PROGRAM_NAME [--perl PERL_VER] --app-dir DIR

Options:

--perl        Perl version (default: $min_ver)
--app-dir     Application directory (default: .)
--files       Additional files for inclusion
              (Specify multiple times for each file)

_END_HELP

    exit 2;
}

my $app_dir = path('.');
Getopt::Long::GetOptions(
    'perl=s'    => \( my $perl_version = DEFAULT_PERL_VERSION() ),
    'app-dir=s' => \$app_dir,
    'files=s@'  => \my @additional_files,
    'help'      => \my $help,
);

$help and print_help();

-d $app_dir or print_help('--app-dir must point to a directory');

my $cores = 1;
if ( $OSNAME =~ /linux/xms ) {
    local $SIG{'CHLD'} = 'IGNORE';
    my ( $writer, $reader, $err );
    open3( $writer, $reader, $err, 'nproc' );
    chomp( $cores = <$reader> );
}

if ( $cores > 1 ) {
    $cores -= 1;
}

my @directories  = qw<bin lib>;
my $top_src_dir  = tempdir( 'CLEANUP' => 1 );
my $top_dest_dir = tempdir( 'CLEANUP' => 1 );
my $dest_dir     = $top_dest_dir->child('pakket');
my $source_dir   = $top_src_dir->child('pakket');

$dest_dir->mkpath();
$source_dir->mkpath();

foreach my $dir (@directories) {
    path($dir)->visit(
        sub {
            my $next = shift;

            $next->is_file
                or return;

            my $next_dir  = $next->parent;
            my $next_path = $source_dir->child($next_dir);
            $next_path->mkpath();

            $next->copy($next_path);
        },
        { 'recurse' => 1 },
    );
}

# cpanfile must be there so "cpanm" would work on the app
foreach my $node ( @additional_files, 'cpanfile' ) {
    my $file = path($node);
    $file->copy( $source_dir->child($file) );
}

my $seacan = App::Seacan->new(
    'config' => {

        'seacan' => {
            'app_name' => 'pakket',
            'output'   => $dest_dir,
            'app'      => $source_dir,
        },

        'perl' => {
            'version'             => $perl_version,
                'installed_as'    => 'seacan',
                'notest'          => 1,
                'noman'           => 1,
                'relocatable_INC' => 1,
                'parallel'        => $cores,
        },
    },
);

$seacan->run;

print "Finished!\n";
system( 'tar', '--create', '--gzip', '--exclude-vcs', "--directory=$top_dest_dir",
    '--file=' . path('pakket.tar.gz')->absolute, '.', );
